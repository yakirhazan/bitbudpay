import * as axios from 'axios';
import { AxiosRequestConfig, AxiosInstance, AxiosPromise } from 'axios';

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
interface ConfigurationParameters {
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    username?: string;
    password?: string;
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    basePath?: string;
    serverIndex?: number;
    baseOptions?: any;
    formDataCtor?: new () => any;
}
declare class Configuration {
    /**
     * parameter for apiKey security
     * @param name security name
     * @memberof Configuration
     */
    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    username?: string;
    /**
     * parameter for basic security
     *
     * @type {string}
     * @memberof Configuration
     */
    password?: string;
    /**
     * parameter for oauth2 security
     * @param name security name
     * @param scopes oauth2 scope
     * @memberof Configuration
     */
    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);
    /**
     * override base path
     *
     * @type {string}
     * @memberof Configuration
     */
    basePath?: string;
    /**
     * override server index
     *
     * @type {number}
     * @memberof Configuration
     */
    serverIndex?: number;
    /**
     * base options for axios calls
     *
     * @type {any}
     * @memberof Configuration
     */
    baseOptions?: any;
    /**
     * The FormData constructor that will be used to create multipart form data
     * requests. You can inject this here so that execution environments that
     * do not support the FormData class can still run the generated client.
     *
     * @type {new () => FormData}
     */
    formDataCtor?: new () => any;
    constructor(param?: ConfigurationParameters);
    /**
     * Check if the given MIME is a JSON MIME.
     * JSON MIME examples:
     *   application/json
     *   application/json; charset=UTF8
     *   APPLICATION/JSON
     *   application/vnd.company+json
     * @param mime - MIME (Multipurpose Internet Mail Extensions)
     * @return True if the given MIME is JSON, false otherwise.
     */
    isJsonMime(mime: string): boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface RequestArgs
 */
interface RequestArgs {
    url: string;
    options: AxiosRequestConfig;
}
/**
 *
 * @export
 * @class BaseAPI
 */
declare class BaseAPI {
    protected basePath: string;
    protected axios: AxiosInstance;
    protected configuration: Configuration | undefined;
    constructor(configuration?: Configuration, basePath?: string, axios?: AxiosInstance);
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AbiParametersInner
 */
interface AbiParametersInner {
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AccelerateTransactionForDeveloperData
 */
interface AccelerateTransactionForDeveloperData {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof AccelerateTransactionForDeveloperData
     */
    'id'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface AccelerateTransactionForDeveloper
 */
interface AccelerateTransactionForDeveloper {
    /**
     *
     * @type {AccelerateTransactionForDeveloperData}
     * @memberof AccelerateTransactionForDeveloper
     */
    'data'?: AccelerateTransactionForDeveloperData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface AccelerateTransactionForDeveloperRequest
 */
interface AccelerateTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof AccelerateTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof AccelerateTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An account can be a Smart Contract Account (SCA) or an Externally Owned Account (EOA). To learn more, see the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types).  If an account type is not specified during the creation of a wallet, it defaults to `EOA` (Externally Owned Account). Note that Solana doesn\'t support Smart Contract Account (SCA).
 * @export
 * @enum {string}
 */
declare const AccountType: {
    readonly Sca: "SCA";
    readonly Eoa: "EOA";
};
type AccountType = typeof AccountType[keyof typeof AccountType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface BadRequestResponse
 */
interface BadRequestResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof BadRequestResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof BadRequestResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The blockchain network that the resource is to be created on or is currently on.
 * @export
 * @enum {string}
 */
declare const Blockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Sol: "SOL";
    readonly SolDevnet: "SOL-DEVNET";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Near: "NEAR";
    readonly NearTestnet: "NEAR-TESTNET";
    readonly Evm: "EVM";
    readonly EvmTestnet: "EVM-TESTNET";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type Blockchain = typeof Blockchain[keyof typeof Blockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TokenStandard: {
    readonly Erc20: "ERC20";
    readonly Erc721: "ERC721";
    readonly Erc1155: "ERC1155";
    readonly Fungible: "Fungible";
    readonly FungibleAsset: "FungibleAsset";
    readonly NonFungible: "NonFungible";
    readonly NonFungibleEdition: "NonFungibleEdition";
    readonly ProgrammableNonFungible: "ProgrammableNonFungible";
    readonly ProgrammableNonFungibleEdition: "ProgrammableNonFungibleEdition";
};
type TokenStandard = typeof TokenStandard[keyof typeof TokenStandard];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Token
 */
interface Token {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Token
     */
    'id': string;
    /**
     * Blockchain name of the specified token.
     * @type {string}
     * @memberof Token
     */
    'name'?: string;
    /**
     *
     * @type {TokenStandard}
     * @memberof Token
     */
    'standard'?: TokenStandard;
    /**
     *
     * @type {Blockchain}
     * @memberof Token
     */
    'blockchain': Blockchain;
    /**
     * Number of decimal places shown in the token amount.
     * @type {number}
     * @memberof Token
     */
    'decimals'?: number;
    /**
     * Defines if the token is a native token of the specified blockchain. If TRUE, the token is a native token.
     * @type {boolean}
     * @memberof Token
     */
    'isNative': boolean;
    /**
     * Blockchain symbol of the specified token.
     * @type {string}
     * @memberof Token
     */
    'symbol'?: string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Token
     */
    'tokenAddress'?: string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Token
     */
    'updateDate': string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Token
     */
    'createDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Balance
 */
interface Balance {
    /**
     * Token balance for each token in the wallet.
     * @type {string}
     * @memberof Balance
     */
    'amount': string;
    /**
     *
     * @type {Token}
     * @memberof Balance
     */
    'token': Token;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Balance
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface BalancesData
 */
interface BalancesData {
    /**
     * List of token balances for each token on the wallet(s).
     * @type {Array<Balance>}
     * @memberof BalancesData
     */
    'tokenBalances'?: Array<Balance>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Balances
 */
interface Balances {
    /**
     *
     * @type {BalancesData}
     * @memberof Balances
     */
    'data': BalancesData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * An action to to take for the decision.
 * @export
 * @enum {string}
 */
declare const RiskAction: {
    readonly Approve: "APPROVE";
    readonly Review: "REVIEW";
    readonly FreezeWallet: "FREEZE_WALLET";
    readonly Deny: "DENY";
};
type RiskAction = typeof RiskAction[keyof typeof RiskAction];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Screening decision detail about matched rule, actions to take, and all related risk signals.
 * @export
 * @interface BaseScreeningDecision
 */
interface BaseScreeningDecision {
    /**
     * Name of the matched rule found in screening.
     * @type {string}
     * @memberof BaseScreeningDecision
     */
    'ruleName'?: string;
    /**
     * Actions to take for the decision.
     * @type {Array<RiskAction>}
     * @memberof BaseScreeningDecision
     */
    'actions'?: Array<RiskAction>;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof BaseScreeningDecision
     */
    'screeningDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Current state of the transaction.
 * @export
 * @enum {string}
 */
declare const TransactionState: {
    readonly Cancelled: "CANCELLED";
    readonly Confirmed: "CONFIRMED";
    readonly Complete: "COMPLETE";
    readonly Denied: "DENIED";
    readonly Failed: "FAILED";
    readonly Initiated: "INITIATED";
    readonly PendingRiskScreening: "PENDING_RISK_SCREENING";
    readonly Queued: "QUEUED";
    readonly Sent: "SENT";
};
type TransactionState = typeof TransactionState[keyof typeof TransactionState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForDeveloperResponseData
 */
interface CreateTransferTransactionForDeveloperResponseData {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperResponseData
     */
    'id': string;
    /**
     *
     * @type {TransactionState}
     * @memberof CreateTransferTransactionForDeveloperResponseData
     */
    'state': TransactionState;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CancelTransactionForDeveloper
 */
interface CancelTransactionForDeveloper {
    /**
     *
     * @type {CreateTransferTransactionForDeveloperResponseData}
     * @memberof CancelTransactionForDeveloper
     */
    'data': CreateTransferTransactionForDeveloperResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CancelTransactionForDeveloperRequest
 */
interface CancelTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CancelTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CancelTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Blockchain associated with the transaction. Required along with `sourceAddress` if you don\'t provide `walletId`.  The `blockchain` and `walletId` fields are mutually exclusive.
 * @export
 * @enum {string}
 */
declare const ContractExecutionBlockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type ContractExecutionBlockchain = typeof ContractExecutionBlockchain[keyof typeof ContractExecutionBlockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForDeveloper
 */
interface CreateContractExecutionTransactionForDeveloper {
    /**
     *
     * @type {CreateTransferTransactionForDeveloperResponseData}
     * @memberof CreateContractExecutionTransactionForDeveloper
     */
    'data': CreateTransferTransactionForDeveloperResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * A dynamic blockchain fee level setting (`LOW`, `MEDIUM`, or `HIGH`) that will be used to pay gas for the transaction. Calculated based on network traffic, supply of validators, and demand for transaction verification. Cannot be used with `gasPrice`, `priorityFee`, or `maxFee`. Estimates for each fee level can be obtained through the `POST /transactions/transfer/estimateFee` API.
 * @export
 * @enum {string}
 */
declare const FeeLevel: {
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
};
type FeeLevel = typeof FeeLevel[keyof typeof FeeLevel];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateContractExecutionTransactionForDeveloperRequest
 */
interface CreateContractExecutionTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'amount'?: string;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'contractAddress': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateContractExecutionTransactionForDeveloperRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Blockchain of the transferred token. Required if `tokenId` is not provided. The `blockchain` and `tokenId` fields are mutually exclusive.
 * @export
 * @enum {string}
 */
declare const TokenBlockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Sol: "SOL";
    readonly SolDevnet: "SOL-DEVNET";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type TokenBlockchain = typeof TokenBlockchain[keyof typeof TokenBlockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForDeveloperRequest
 */
interface CreateTransferTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'amounts'?: Array<string>;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'destinationAddress': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'priorityFee'?: string;
    /**
     * List of NFT token IDs corresponding with the NFTs to transfer. Batch transfers are supported only for ERC-1155 tokens. The length of NFT token IDs must match the length of amounts.
     * @type {Array<string>}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'refId'?: string;
    /**
     * System generated identifier of the token. Excluded with `tokenAddress` and `tokenBlockchain`.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'tokenId'?: string;
    /**
     * Blockchain address of the transferred token. Empty for native tokens. Excluded with `tokenId`.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'tokenAddress'?: string;
    /**
     *
     * @type {TokenBlockchain}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'blockchain'?: TokenBlockchain;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateTransferTransactionForDeveloperRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateTransferTransactionForDeveloperResponse
 */
interface CreateTransferTransactionForDeveloperResponse {
    /**
     *
     * @type {CreateTransferTransactionForDeveloperResponseData}
     * @memberof CreateTransferTransactionForDeveloperResponse
     */
    'data'?: CreateTransferTransactionForDeveloperResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface WalletMetadata
 */
interface WalletMetadata {
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof WalletMetadata
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof WalletMetadata
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateWalletRequest
 */
interface CreateWalletRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateWalletRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {AccountType}
     * @memberof CreateWalletRequest
     */
    'accountType'?: AccountType;
    /**
     * Blockchain(s) the requested wallets will be created on.
     * @type {Array<Blockchain>}
     * @memberof CreateWalletRequest
     */
    'blockchains': Array<Blockchain>;
    /**
     * Number of wallets that will be created per specified blockchain.
     * @type {number}
     * @memberof CreateWalletRequest
     */
    'count'?: number;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CreateWalletRequest
     */
    'entitySecretCiphertext': string;
    /**
     * List of metadata fields to associate with the corresponding wallet. If count is specified, the amount of items in the array should match the count field.
     * @type {Array<WalletMetadata>}
     * @memberof CreateWalletRequest
     */
    'metadata'?: Array<WalletMetadata>;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof CreateWalletRequest
     */
    'walletSetId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface CreateWalletSetRequest
 */
interface CreateWalletSetRequest {
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CreateWalletSetRequest
     */
    'entitySecretCiphertext': string;
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateWalletSetRequest
     */
    'idempotencyKey': string;
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof CreateWalletSetRequest
     */
    'name'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateWalletUpgradeTransactionForDeveloper
 */
interface CreateWalletUpgradeTransactionForDeveloper {
    /**
     *
     * @type {CreateTransferTransactionForDeveloperResponseData}
     * @memberof CreateWalletUpgradeTransactionForDeveloper
     */
    'data': CreateTransferTransactionForDeveloperResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * `newScaCore` displays the version of the SCA available for upgrade. For a list of supported versions, refer to the developer documentation.
 * @export
 * @enum {string}
 */
declare const NewScaCore: {
    readonly Circle6900SingleownerV2: "circle_6900_singleowner_v2";
};
type NewScaCore = typeof NewScaCore[keyof typeof NewScaCore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface CreateWalletUpgradeTransactionForDeveloperRequest
 */
interface CreateWalletUpgradeTransactionForDeveloperRequest {
    /**
     * Universally unique identifier (UUID v4) idempotency key. This key is utilized to ensure exactly-once execution of mutating requests. To create a UUIDv4 go to [uuidgenerator.net](https://www.uuidgenerator.net). If the same key is reused, it will be treated as the same request and the original response will be returned.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'idempotencyKey': string;
    /**
     *
     * @type {NewScaCore}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'newScaCore': NewScaCore;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'entitySecretCiphertext': string;
    /**
     *
     * @type {FeeLevel}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'feeLevel'?: FeeLevel;
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'priorityFee'?: string;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'refId'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof CreateWalletUpgradeTransactionForDeveloperRequest
     */
    'walletId': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Describes who controls the digital assets in a wallet: either the end-user or the developer.
 * @export
 * @enum {string}
 */
declare const CustodyType: {
    readonly Developer: "DEVELOPER";
    readonly Enduser: "ENDUSER";
};
type CustodyType = typeof CustodyType[keyof typeof CustodyType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface DeriveWalletRequest
 */
interface DeriveWalletRequest {
    /**
     *
     * @type {WalletMetadata}
     * @memberof DeriveWalletRequest
     */
    'metadata'?: WalletMetadata;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface WalletSet
 */
interface WalletSet {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof WalletSet
     */
    'id': string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof WalletSet
     */
    'createDate': string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof WalletSet
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type DeveloperWalletSet
 * @export
 */
type DeveloperWalletSet = WalletSet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * This enum describes the current state of the wallet.
 * @export
 * @enum {string}
 */
declare const WalletState: {
    readonly Live: "LIVE";
    readonly Frozen: "FROZEN";
};
type WalletState = typeof WalletState[keyof typeof WalletState];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Wallet
 */
interface Wallet {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Wallet
     */
    'id': string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Wallet
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof Wallet
     */
    'blockchain': Blockchain;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Wallet
     */
    'createDate': string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Wallet
     */
    'updateDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof Wallet
     */
    'custodyType': CustodyType;
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof Wallet
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof Wallet
     */
    'refId'?: string;
    /**
     *
     * @type {WalletState}
     * @memberof Wallet
     */
    'state': WalletState;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof Wallet
     */
    'userId'?: string;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Wallet
     */
    'walletSetId': string;
    /**
     * For NEAR blockchains only, the originally assigned public key of a wallet at the time of its creation.
     * @type {string}
     * @memberof Wallet
     */
    'initialPublicKey'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type EOAWallet
 * @export
 */
type EOAWallet = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type EOAWalletWithBalances
 * @export
 */
type EOAWalletWithBalances = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type EndUserWalletSet
 * @export
 */
type EndUserWalletSet = WalletSet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateContractExecutionTransactionFeeRequest
 */
interface EstimateContractExecutionTransactionFeeRequest {
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * The raw transaction data, must be an even-length hexadecimal string with the `0x` prefix, to be executed. It is important to note that the usage of `callData` is mutually exclusive with the `abiFunctionSignature` and `abiParameters`. Therefore, `callData` cannot be utilized simultaneously with either `abiFunctionSignature` or `abiParameters`.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'callData'?: string;
    /**
     * The amount of native token that will be sent to the contract abi execution. Optional field for payable api only, if not provided, no native token will be sent.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'amount'?: string;
    /**
     *
     * @type {ContractExecutionBlockchain}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'blockchain'?: ContractExecutionBlockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'contractAddress': string;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof EstimateContractExecutionTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface TransactionFee
 */
interface TransactionFee {
    /**
     * The maximum units of gas to use for the transaction. Required if `feeLevel` is not provided. Estimates for this limit can be obtained through the `POST /transactions/transfer/estimateFee` API. GasLimit override (only supported for EOA wallets): Using `gasLimit` together with `feeLevel`, the provided `gasLimit` is required to be greater or equal to `feeLevel` estimation and will override the estimation\'s gasLimit.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasLimit'?: string;
    /**
     * For blockchains without EIP-1559 support, the maximum price of gas, in gwei, to use per each unit of gas (see `gasLimit`). Requires `gasLimit`. Cannot be used with `feeLevel`, `priorityFee`, or `maxFee`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'gasPrice'?: string;
    /**
     * For blockchains with EIP-1559 support, the maximum price per unit of gas (see `gasLimit`), in gwei. Requires `priorityFee`, and `gasLimit` to be present. Cannot be used with `feeLevel` or `gasPrice`. Estimates for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'maxFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the “tip”, in gwei, to add to the base fee as an incentive for validators. Please note that the `maxFee` and `gasLimit` parameters are required alongside the `priorityFee`. The `feeLevel` and `gasPrice` parameters cannot be used with the `priorityFee`.  Estimations for this fee can be obtained through the `POST /transactions/transfer/estimateFee` API.
     * @type {string}
     * @memberof TransactionFee
     */
    'priorityFee'?: string;
    /**
     * For blockchains with EIP-1559 support, the estimated base fee represents the minimum fee required for a transaction to be included in a block on the blockchain.  It is measured in gwei and compensates for the computational resources validators consume to process the transaction.  The base fee is supplemented by a separate \"tip\" called the priority fee, which acts as an extra incentive for validators to prioritize the transaction.  The priority fee is added to the base fee to calculate the final transaction fee.
     * @type {string}
     * @memberof TransactionFee
     */
    'baseFee'?: string;
    /**
     * The estimated network fee is the maximum amount of cryptocurrency (such as ETH, ARB, or SOL) that you will pay for your transaction. This fee depends on the parameters you set, including Gas Limit, Priority Fee, and Max Fee. It compensates for the computational resources that validators consume to process the transaction. It is measured in native token such as ETH, SOL. For blockchains with L1 data fees such as OP/BASE, the network fee is a combination of the Execution Gas Fee and the L1 Data Fee. Each blockchain might use different formula for network fee. Refer to each specific blockchain\'s documentation to understand how `networkFee` is calculated.
     * @type {string}
     * @memberof TransactionFee
     */
    'networkFee'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransactionFeeData
 */
interface EstimateTransactionFeeData {
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'high'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'low'?: TransactionFee;
    /**
     *
     * @type {TransactionFee}
     * @memberof EstimateTransactionFeeData
     */
    'medium'?: TransactionFee;
    /**
     * One of ERC-4337 gas fields. The amount of gas to allocate for the main execution call. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'callGasLimit'?: string;
    /**
     * One of ERC-4337 gas fields. The amount of gas to allocate for the verification step. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'verificationGasLimit'?: string;
    /**
     * One of ERC-4337 gas fields. The amount of gas to pay to compensate the bundler for pre-verification execution and call data. Only in smart contract account estimation response.
     * @type {string}
     * @memberof EstimateTransactionFeeData
     */
    'preVerificationGas'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransactionFee
 */
interface EstimateTransactionFee {
    /**
     *
     * @type {EstimateTransactionFeeData}
     * @memberof EstimateTransactionFee
     */
    'data': EstimateTransactionFeeData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface EstimateTransferTransactionFeeRequest
 */
interface EstimateTransferTransactionFeeRequest {
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'amounts': Array<string>;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'destinationAddress': string;
    /**
     * List of NFT token IDs corresponding with the NFTs to transfer. Batch transfers are supported only for ERC-1155 tokens. The length of NFT token IDs must match the length of amounts.
     * @type {Array<string>}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'nftTokenIds'?: Array<string>;
    /**
     * Source address of the transaction. Required along with `blockchain` if `walletId` is not provided.  The `sourceAddress` and `walletId` fields are mutually exclusive.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'sourceAddress'?: string;
    /**
     * System generated identifier of the token. Excluded with `tokenAddress` and `tokenBlockchain`.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'tokenId'?: string;
    /**
     * Blockchain address of the transferred token. Empty for native tokens. Excluded with `tokenId`.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'tokenAddress'?: string;
    /**
     *
     * @type {TokenBlockchain}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'blockchain'?: TokenBlockchain;
    /**
     * Unique system generated identifier of the wallet. Required when `sourceAddress` and `blockchain` are not provided.  Mutually exclusive with `sourceAddress` and `blockchain`.  For contract deploys this wallet ID will be used as the source.
     * @type {string}
     * @memberof EstimateTransferTransactionFeeRequest
     */
    'walletId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The blockchain network that the resource is to be created on or is currently on.
 * @export
 * @enum {string}
 */
declare const EvmBlockchain: {
    readonly Eth: "ETH";
    readonly EthSepolia: "ETH-SEPOLIA";
    readonly Avax: "AVAX";
    readonly AvaxFuji: "AVAX-FUJI";
    readonly Matic: "MATIC";
    readonly MaticAmoy: "MATIC-AMOY";
    readonly Arb: "ARB";
    readonly ArbSepolia: "ARB-SEPOLIA";
    readonly Uni: "UNI";
    readonly UniSepolia: "UNI-SEPOLIA";
    readonly Base: "BASE";
    readonly BaseSepolia: "BASE-SEPOLIA";
    readonly Op: "OP";
    readonly OpSepolia: "OP-SEPOLIA";
};
type EvmBlockchain = typeof EvmBlockchain[keyof typeof EvmBlockchain];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ModelError
 */
interface ModelError {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof ModelError
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof ModelError
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Nft
 */
interface Nft {
    /**
     * Amount of NFTs on a wallet. For non-fungible token standards, like ERC721, NonFungible, NonFungibleEdition, ProgrammableNonFungible, ProgrammableNonFungibleEdition, amount will always be “1”; for semi-fungible token standards like ERC1155, amount will correspond to the number of tokens; for FungibleAsset, amount can be greater than \"1\".
     * @type {string}
     * @memberof Nft
     */
    'amount': string;
    /**
     * The metadata of the NFT.
     * @type {string}
     * @memberof Nft
     */
    'metadata'?: string;
    /**
     * The NFT token ID.
     * @type {string}
     * @memberof Nft
     */
    'nftTokenId'?: string;
    /**
     *
     * @type {Token}
     * @memberof Nft
     */
    'token': Token;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Nft
     */
    'updateDate': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface NftsData
 */
interface NftsData {
    /**
     *
     * @type {Array<Nft>}
     * @memberof NftsData
     */
    'nfts'?: Array<Nft>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Nfts
 */
interface Nfts {
    /**
     *
     * @type {NftsData}
     * @memberof Nfts
     */
    'data': NftsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NotAuthorizedResponse
 */
interface NotAuthorizedResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof NotAuthorizedResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof NotAuthorizedResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface NotFoundResponse
 */
interface NotFoundResponse {
    /**
     * Code that corresponds to the error.
     * @type {number}
     * @memberof NotFoundResponse
     */
    'code': number;
    /**
     * Message that describes the error.
     * @type {string}
     * @memberof NotFoundResponse
     */
    'message': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Operation type of the transaction.
 * @export
 * @enum {string}
 */
declare const Operation: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly ContractDeployment: "CONTRACT_DEPLOYMENT";
};
type Operation = typeof Operation[keyof typeof Operation];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * The category of the associated risk of the blockchain address.
 * @export
 * @enum {string}
 */
declare const RiskCategory: {
    readonly Sanctions: "SANCTIONS";
    readonly Csam: "CSAM";
    readonly IllicitBehavior: "ILLICIT_BEHAVIOR";
    readonly Gambling: "GAMBLING";
    readonly TerroristFinancing: "TERRORIST_FINANCING";
    readonly Unsupported: "UNSUPPORTED";
    readonly Frozen: "FROZEN";
    readonly Other: "OTHER";
    readonly HighRiskIndustry: "HIGH_RISK_INDUSTRY";
    readonly Pep: "PEP";
    readonly Trusted: "TRUSTED";
    readonly Hacking: "HACKING";
    readonly HumanTrafficking: "HUMAN_TRAFFICKING";
    readonly SpecialMeasures: "SPECIAL_MEASURES";
};
type RiskCategory = typeof RiskCategory[keyof typeof RiskCategory];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Risk score of the signal.
 * @export
 * @enum {string}
 */
declare const RiskScore: {
    readonly Unknown: "UNKNOWN";
    readonly Low: "LOW";
    readonly Medium: "MEDIUM";
    readonly High: "HIGH";
    readonly Severe: "SEVERE";
    readonly Blocklist: "BLOCKLIST";
};
type RiskScore = typeof RiskScore[keyof typeof RiskScore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * Type of the signal.
 * @export
 * @enum {string}
 */
declare const RiskType: {
    readonly Ownership: "OWNERSHIP";
    readonly Counterparty: "COUNTERPARTY";
    readonly Indirect: "INDIRECT";
};
type RiskType = typeof RiskType[keyof typeof RiskType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * Risk signal that includes source, value, and risk type, risk score and risk category.
 * @export
 * @interface RiskSignal
 */
interface RiskSignal {
    /**
     * Source of the risk signal.
     * @type {string}
     * @memberof RiskSignal
     */
    'source': RiskSignalSourceEnum;
    /**
     * Value of the source. For example, if source is “ADDRESS”. The source value would be an blockchain address.
     * @type {string}
     * @memberof RiskSignal
     */
    'sourceValue': string;
    /**
     *
     * @type {RiskScore}
     * @memberof RiskSignal
     */
    'riskScore': RiskScore;
    /**
     * List of risk categories for the signal.
     * @type {Array<RiskCategory>}
     * @memberof RiskSignal
     */
    'riskCategories': Array<RiskCategory>;
    /**
     *
     * @type {RiskType}
     * @memberof RiskSignal
     */
    'type': RiskType;
}
declare const RiskSignalSourceEnum: {
    readonly Address: "ADDRESS";
    readonly Blockchain: "BLOCKCHAIN";
    readonly Asset: "ASSET";
};
type RiskSignalSourceEnum = typeof RiskSignalSourceEnum[keyof typeof RiskSignalSourceEnum];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type SCAWallet
 * @export
 */
type SCAWallet = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type SCAWalletWithBalances
 * @export
 */
type SCAWalletWithBalances = Wallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 * SCAs have different versions, each with unique functionality. `SCACore` displays the version of the SCA being created. For a list of supported versions, refer to the developer documentation.
 * @export
 * @enum {string}
 */
declare const ScaCore: {
    readonly _4337V1: "circle_4337_v1";
    readonly _6900SingleownerV1: "circle_6900_singleowner_v1";
    readonly _6900SingleownerV2: "circle_6900_singleowner_v2";
    readonly _6900SingleownerV3: "circle_6900_singleowner_v3";
};
type ScaCore = typeof ScaCore[keyof typeof ScaCore];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignDelegateActionRequest
 */
interface SignDelegateActionRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignDelegateActionRequest
     */
    'walletId': string;
    /**
     * Unsigned delegate action string that needs to be signed. Must be base64 encoded.
     * @type {string}
     * @memberof SignDelegateActionRequest
     */
    'unsignedDelegateAction': string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof SignDelegateActionRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignDelegateActionResponseData
 */
interface SignDelegateActionResponseData {
    /**
     * Each chain encode signatures in a different way, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis) and the blockchain\'s document.
     * @type {string}
     * @memberof SignDelegateActionResponseData
     */
    'signature': string;
    /**
     * Signed delegate action is a base64 encoded string for NEAR.
     * @type {string}
     * @memberof SignDelegateActionResponseData
     */
    'signedDelegateAction': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignDelegateActionResponse
 */
interface SignDelegateActionResponse {
    /**
     *
     * @type {SignDelegateActionResponseData}
     * @memberof SignDelegateActionResponse
     */
    'data': SignDelegateActionResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignMessageRequest
 */
interface SignMessageRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'walletId': string;
    /**
     * Indicator of whether the input message is encoded by hex. If TRUE, then the message should be a hex string. By default, it is False.
     * @type {boolean}
     * @memberof SignMessageRequest
     */
    'encodedByHex'?: boolean;
    /**
     * The user friendly message that needs to be signed. If it is a hex string, encodedByHex needs to be TRUE. The hex string should start with “0x” and have even length.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'message': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'memo'?: string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof SignMessageRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTransactionRequest
 */
interface SignTransactionRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'walletId': string;
    /**
     * Raw transaction string that needs to be signed. Excluded with `transaction`. Required without `transaction`. Required to be base64 encoded for NEAR, Solana chains. Required to be hex encoded for EVM chains.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'rawTransaction'?: string;
    /**
     * Transaction object in JSON that needs to be signed. Excluded with `rawTransaction`. Required without `rawTransaction`.  NOTE: This field is only supported by `EVM` chains.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'transaction'?: string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'memo'?: string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof SignTransactionRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTransactionResponseData
 */
interface SignTransactionResponseData {
    /**
     * Each chain encode signatures in a different way, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis) and the blockchain\'s document.
     * @type {string}
     * @memberof SignTransactionResponseData
     */
    'signature': string;
    /**
     * Signed transaction. Base64 encoded for NEAR and Solana chains. Hex encoded for EVM chains.
     * @type {string}
     * @memberof SignTransactionResponseData
     */
    'signedTransaction': string;
    /**
     * Blockchain generated identifier of the transaction.
     * @type {string}
     * @memberof SignTransactionResponseData
     */
    'txHash'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignTransactionResponse
 */
interface SignTransactionResponse {
    /**
     *
     * @type {SignTransactionResponseData}
     * @memberof SignTransactionResponse
     */
    'data': SignTransactionResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignTypedDataRequest
 */
interface SignTypedDataRequest {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'walletId': string;
    /**
     * A string represents the typed structured data in EIP-712
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'data': string;
    /**
     * The human readable explanation for this sign action. Useful for presenting with extra information.
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'memo'?: string;
    /**
     * A base64 string expression of the entity secret ciphertext. The entity secret should be encrypted by the entity public key. Circle mandates that the entity secret ciphertext is unique for each API request.
     * @type {string}
     * @memberof SignTypedDataRequest
     */
    'entitySecretCiphertext': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface SignatureResponseData
 */
interface SignatureResponseData {
    /**
     * Each chain encode signatures in a different way, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis) and the blockchain\'s document.
     * @type {string}
     * @memberof SignatureResponseData
     */
    'signature': string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface SignatureResponse
 */
interface SignatureResponse {
    /**
     *
     * @type {SignatureResponseData}
     * @memberof SignatureResponse
     */
    'data': SignatureResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenResponseData
 */
interface TokenResponseData {
    /**
     *
     * @type {Token}
     * @memberof TokenResponseData
     */
    'token'?: Token;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TokenResponse
 */
interface TokenResponse {
    /**
     *
     * @type {TokenResponseData}
     * @memberof TokenResponse
     */
    'data'?: TokenResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type TransactionScreeningDecision
 * Transaction decision detail about matched rule, actions to take, and all related risk signals.
 * @export
 */
type TransactionScreeningDecision = BaseScreeningDecision;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @enum {string}
 */
declare const TransactionType: {
    readonly Inbound: "INBOUND";
    readonly Outbound: "OUTBOUND";
};
type TransactionType = typeof TransactionType[keyof typeof TransactionType];

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transaction
 */
interface Transaction {
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'id': string;
    /**
     * The contract ABI function signature or `callData` field is required for interacting with the smart contract. The ABI function signature cannot be used simultaneously with `callData`. e.g. burn(uint256)
     * @type {string}
     * @memberof Transaction
     */
    'abiFunctionSignature'?: string;
    /**
     * The contract ABI function signature parameters for executing the contract interaction. Supported parameter types include string, integer, boolean, and array. These parameters should be used exclusively with the abiFunctionSignature and cannot be used with `callData`.
     * @type {Array<AbiParametersInner>}
     * @memberof Transaction
     */
    'abiParameters'?: Array<AbiParametersInner>;
    /**
     * Transfer amounts in decimal number format, at least one element is required for transfer. For ERC721 token transfer, the amounts field is required to be [\"1\"] (array with \"1\" as the only element).
     * @type {Array<string>}
     * @memberof Transaction
     */
    'amounts'?: Array<string>;
    /**
     * Transaction amount in USD decimal format.
     * @type {string}
     * @memberof Transaction
     */
    'amountInUSD'?: string;
    /**
     * Identifier for the block that includes the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'blockHash'?: string;
    /**
     * Block height of the transaction, representing the number of blockchain confirmations.
     * @type {number}
     * @memberof Transaction
     */
    'blockHeight'?: number;
    /**
     *
     * @type {Blockchain}
     * @memberof Transaction
     */
    'blockchain': Blockchain;
    /**
     * The blockchain address of the contract to be executed.
     * @type {string}
     * @memberof Transaction
     */
    'contractAddress'?: string;
    /**
     * Date and time the resource was created, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Transaction
     */
    'createDate': string;
    /**
     *
     * @type {CustodyType}
     * @memberof Transaction
     */
    'custodyType'?: CustodyType;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Transaction
     */
    'destinationAddress'?: string;
    /**
     * Description of the error. Only present for transactions in `FAILED` state.
     * @type {string}
     * @memberof Transaction
     */
    'errorReason'?: string;
    /**
     * Additional detail associated with the corresponding transaction\'s error reason
     * @type {string}
     * @memberof Transaction
     */
    'errorDetails'?: string;
    /**
     *
     * @type {TransactionFee}
     * @memberof Transaction
     */
    'estimatedFee'?: TransactionFee;
    /**
     *
     * @type {FeeLevel}
     * @memberof Transaction
     */
    'feeLevel'?: FeeLevel;
    /**
     * Date the transaction was first confirmed in a block. ISO-8601 UTC date/time.
     * @type {string}
     * @memberof Transaction
     */
    'firstConfirmDate'?: string;
    /**
     * Gas fee, in native token, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFee'?: string;
    /**
     * Gas fee, in USD, paid to the network for the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'networkFeeInUSD'?: string;
    /**
     * List of Nfts, in JSON string format, associated with the transaction.
     * @type {Array<string>}
     * @memberof Transaction
     */
    'nfts'?: Array<string>;
    /**
     *
     * @type {Operation}
     * @memberof Transaction
     */
    'operation'?: Operation;
    /**
     * Optional reference or description used to identify the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'refId'?: string;
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof Transaction
     */
    'sourceAddress'?: string;
    /**
     *
     * @type {TransactionState}
     * @memberof Transaction
     */
    'state': TransactionState;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'tokenId'?: string;
    /**
     *
     * @type {TransactionType}
     * @memberof Transaction
     */
    'transactionType': TransactionType;
    /**
     * Blockchain generated identifier of the transaction.
     * @type {string}
     * @memberof Transaction
     */
    'txHash'?: string;
    /**
     * Date and time the resource was last updated, in ISO-8601 UTC format.
     * @type {string}
     * @memberof Transaction
     */
    'updateDate': string;
    /**
     * Unique system generated identifier for the user.
     * @type {string}
     * @memberof Transaction
     */
    'userId'?: string;
    /**
     * System-generated unique identifier of the resource.
     * @type {string}
     * @memberof Transaction
     */
    'walletId'?: string;
    /**
     *
     * @type {TransactionScreeningDecision}
     * @memberof Transaction
     */
    'transactionScreeningEvaluation'?: TransactionScreeningDecision;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionResponseData
 */
interface TransactionResponseData {
    /**
     *
     * @type {Transaction}
     * @memberof TransactionResponseData
     */
    'transaction'?: Transaction;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionResponse
 */
interface TransactionResponse {
    /**
     *
     * @type {TransactionResponseData}
     * @memberof TransactionResponse
     */
    'data': TransactionResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface TransactionsData
 */
interface TransactionsData {
    /**
     *
     * @type {Array<Transaction>}
     * @memberof TransactionsData
     */
    'transactions'?: Array<Transaction>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Transactions
 */
interface Transactions {
    /**
     *
     * @type {TransactionsData}
     * @memberof Transactions
     */
    'data'?: TransactionsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateWalletRequest
 */
interface UpdateWalletRequest {
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof UpdateWalletRequest
     */
    'name'?: string;
    /**
     * Reference or description used to identify the object.
     * @type {string}
     * @memberof UpdateWalletRequest
     */
    'refId'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface UpdateWalletSetRequest
 */
interface UpdateWalletSetRequest {
    /**
     * Name or description associated with the wallet or walletSet.
     * @type {string}
     * @memberof UpdateWalletSetRequest
     */
    'name'?: string;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/**
 *
 * @export
 * @interface ValidateAddressData
 */
interface ValidateAddressData {
    /**
     *
     * @type {boolean}
     * @memberof ValidateAddressData
     */
    'isValid': boolean;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ValidateAddress
 */
interface ValidateAddress {
    /**
     *
     * @type {ValidateAddressData}
     * @memberof ValidateAddress
     */
    'data': ValidateAddressData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface ValidateAddressRequest
 */
interface ValidateAddressRequest {
    /**
     * Blockchain generated unique identifier, associated with wallet (account), smart contract or other blockchain objects.
     * @type {string}
     * @memberof ValidateAddressRequest
     */
    'address': string;
    /**
     *
     * @type {Blockchain}
     * @memberof ValidateAddressRequest
     */
    'blockchain': Blockchain;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type WalletsDataWalletsInner
 * @export
 */
type WalletsDataWalletsInner = EOAWallet | SCAWallet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletResponseData
 */
interface WalletResponseData {
    /**
     *
     * @type {WalletsDataWalletsInner}
     * @memberof WalletResponseData
     */
    'wallet': WalletsDataWalletsInner;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletResponse
 */
interface WalletResponse {
    /**
     *
     * @type {WalletResponseData}
     * @memberof WalletResponse
     */
    'data': WalletResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type WalletSetsDataWalletSetsInner
 * @export
 */
type WalletSetsDataWalletSetsInner = DeveloperWalletSet | EndUserWalletSet;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletSetResponseData
 */
interface WalletSetResponseData {
    /**
     *
     * @type {WalletSetsDataWalletSetsInner}
     * @memberof WalletSetResponseData
     */
    'walletSet': WalletSetsDataWalletSetsInner;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletSetResponse
 */
interface WalletSetResponse {
    /**
     *
     * @type {WalletSetResponseData}
     * @memberof WalletSetResponse
     */
    'data': WalletSetResponseData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletSetsData
 */
interface WalletSetsData {
    /**
     *
     * @type {Array<WalletSetsDataWalletSetsInner>}
     * @memberof WalletSetsData
     */
    'walletSets': Array<WalletSetsDataWalletSetsInner>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletSets
 */
interface WalletSets {
    /**
     *
     * @type {WalletSetsData}
     * @memberof WalletSets
     */
    'data': WalletSetsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletsData
 */
interface WalletsData {
    /**
     *
     * @type {Array<WalletsDataWalletsInner>}
     * @memberof WalletsData
     */
    'wallets': Array<WalletsDataWalletsInner>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface Wallets
 */
interface Wallets {
    /**
     *
     * @type {WalletsData}
     * @memberof Wallets
     */
    'data': WalletsData;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 * @type WalletsWithBalancesDataWalletsInner
 * @export
 */
type WalletsWithBalancesDataWalletsInner = EOAWalletWithBalances | SCAWalletWithBalances;

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletsWithBalancesData
 */
interface WalletsWithBalancesData {
    /**
     *
     * @type {Array<WalletsWithBalancesDataWalletsInner>}
     * @memberof WalletsWithBalancesData
     */
    'wallets': Array<WalletsWithBalancesDataWalletsInner>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/**
 *
 * @export
 * @interface WalletsWithBalances
 */
interface WalletsWithBalances {
    /**
     *
     * @type {WalletsWithBalancesData}
     * @memberof WalletsWithBalances
     */
    'data': WalletsWithBalancesData;
}

/**
 * SigningApi - axios parameter creator
 * @export
 */
declare const SigningApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Sign a delegate action from a specific developer-controlled wallet.  NOTE: This endpoint is only available for NEAR and NEAR-TESTNET.
     * @summary Sign delegate action
     * @param {SignDelegateActionRequest} signDelegateActionRequest Schema for the request payload to sign a delegate action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDelegateAction: (signDelegateActionRequest: SignDelegateActionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sign a message from a specified developer-controlled wallet. This endpoint supports message signing for both Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageRequest} signMessageRequest Schema for the request payload to sign a message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage: (signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sign a transaction from a specific developer-controlled wallet.  NOTE: This endpoint is only available for the following chains: `SOL`, `SOL-DEVNET`, `NEAR`, `NEAR-TESTNET`, `EVM`, `EVM-TESTNET`. Each chain defines its own standard, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis).
     * @summary Sign transaction
     * @param {SignTransactionRequest} signTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransaction: (signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataRequest} signTypedDataRequest Schema for the request payload to sign typed data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTypedData: (signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SigningApi - functional programming interface
 * @export
 */
declare const SigningApiFp: (configuration?: Configuration) => {
    /**
     * Sign a delegate action from a specific developer-controlled wallet.  NOTE: This endpoint is only available for NEAR and NEAR-TESTNET.
     * @summary Sign delegate action
     * @param {SignDelegateActionRequest} signDelegateActionRequest Schema for the request payload to sign a delegate action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDelegateAction(signDelegateActionRequest: SignDelegateActionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignDelegateActionResponse>>;
    /**
     * Sign a message from a specified developer-controlled wallet. This endpoint supports message signing for both Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageRequest} signMessageRequest Schema for the request payload to sign a message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage(signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureResponse>>;
    /**
     * Sign a transaction from a specific developer-controlled wallet.  NOTE: This endpoint is only available for the following chains: `SOL`, `SOL-DEVNET`, `NEAR`, `NEAR-TESTNET`, `EVM`, `EVM-TESTNET`. Each chain defines its own standard, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis).
     * @summary Sign transaction
     * @param {SignTransactionRequest} signTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransaction(signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignTransactionResponse>>;
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataRequest} signTypedDataRequest Schema for the request payload to sign typed data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTypedData(signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignatureResponse>>;
};
/**
 * SigningApi - factory interface
 * @export
 */
declare const SigningApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Sign a delegate action from a specific developer-controlled wallet.  NOTE: This endpoint is only available for NEAR and NEAR-TESTNET.
     * @summary Sign delegate action
     * @param {SignDelegateActionRequest} signDelegateActionRequest Schema for the request payload to sign a delegate action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signDelegateAction(signDelegateActionRequest: SignDelegateActionRequest, options?: any): AxiosPromise<SignDelegateActionResponse>;
    /**
     * Sign a message from a specified developer-controlled wallet. This endpoint supports message signing for both Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageRequest} signMessageRequest Schema for the request payload to sign a message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signMessage(signMessageRequest: SignMessageRequest, options?: any): AxiosPromise<SignatureResponse>;
    /**
     * Sign a transaction from a specific developer-controlled wallet.  NOTE: This endpoint is only available for the following chains: `SOL`, `SOL-DEVNET`, `NEAR`, `NEAR-TESTNET`, `EVM`, `EVM-TESTNET`. Each chain defines its own standard, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis).
     * @summary Sign transaction
     * @param {SignTransactionRequest} signTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTransaction(signTransactionRequest: SignTransactionRequest, options?: any): AxiosPromise<SignTransactionResponse>;
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataRequest} signTypedDataRequest Schema for the request payload to sign typed data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    signTypedData(signTypedDataRequest: SignTypedDataRequest, options?: any): AxiosPromise<SignatureResponse>;
};
/**
 * SigningApi - object-oriented interface
 * @export
 * @class SigningApi
 * @extends {BaseAPI}
 */
declare class SigningApi extends BaseAPI {
    /**
     * Sign a delegate action from a specific developer-controlled wallet.  NOTE: This endpoint is only available for NEAR and NEAR-TESTNET.
     * @summary Sign delegate action
     * @param {SignDelegateActionRequest} signDelegateActionRequest Schema for the request payload to sign a delegate action.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signDelegateAction(signDelegateActionRequest: SignDelegateActionRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignDelegateActionResponse, any>>;
    /**
     * Sign a message from a specified developer-controlled wallet. This endpoint supports message signing for both Ethereum-based blockchains (using EIP-191) and Solana (using Ed25519 signatures). Note that Smart Contract Accounts (SCA) are specific to Ethereum and EVM-compatible chains. The difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign message
     * @param {SignMessageRequest} signMessageRequest Schema for the request payload to sign a message.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signMessage(signMessageRequest: SignMessageRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignatureResponse, any>>;
    /**
     * Sign a transaction from a specific developer-controlled wallet.  NOTE: This endpoint is only available for the following chains: `SOL`, `SOL-DEVNET`, `NEAR`, `NEAR-TESTNET`, `EVM`, `EVM-TESTNET`. Each chain defines its own standard, please refer to [Signing APIs doc](https://learn.circle.com/w3s/signing-apis).
     * @summary Sign transaction
     * @param {SignTransactionRequest} signTransactionRequest Schema for the request payload to sign a transaction.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signTransaction(signTransactionRequest: SignTransactionRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignTransactionResponse, any>>;
    /**
     * Sign the EIP-712 typed structured data from a specified developer-controlled wallet. This endpoint only supports Ethereum and EVM-compatible blockchains. Please note that not all Dapps currently support Smart Contract Accounts (SCA); the difference between Ethereum\'s EOA and SCA can be found in the [account types guide](https://developers.circle.com/w3s/docs/programmable-wallets-account-types). You can also check the list of Ethereum Dapps that support SCA: https://eip1271.io/.
     * @summary Sign typed data
     * @param {SignTypedDataRequest} signTypedDataRequest Schema for the request payload to sign typed data.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SigningApi
     */
    signTypedData(signTypedDataRequest: SignTypedDataRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<SignatureResponse, any>>;
}

/**
 * TokenLookupApi - axios parameter creator
 * @export
 */
declare const TokenLookupApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId: (id: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokenLookupApi - functional programming interface
 * @export
 */
declare const TokenLookupApiFp: (configuration?: Configuration) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenResponse>>;
};
/**
 * TokenLookupApi - factory interface
 * @export
 */
declare const TokenLookupApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTokenId(id: string, options?: any): AxiosPromise<TokenResponse>;
};
/**
 * TokenLookupApi - object-oriented interface
 * @export
 * @class TokenLookupApi
 * @extends {BaseAPI}
 */
declare class TokenLookupApi extends BaseAPI {
    /**
     * Fetches details of a specific token given its unique identifier. Every token in your network of wallets has a UUID associated with it, regardless of whether it\'s already recognized or was added as a monitored token.
     * @summary Get token details
     * @param {string} id The universally unique identifier of the resource.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenLookupApi
     */
    getTokenId(id: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<TokenResponse, any>>;
}

/**
 * TransactionsApi - axios parameter creator
 * @export
 */
declare const TransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Accelerates a specified transaction from a developer-controlled wallet. Additional gas fees may be incurred.
     * @summary Accelerate a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {AccelerateTransactionForDeveloperRequest} accelerateTransactionForDeveloperRequest Accelerate transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionAccelerate: (id: string, accelerateTransactionForDeveloperRequest: AccelerateTransactionForDeveloperRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Cancels a specified transaction from a developer-controlled wallet. Gas fees may still be incurred.  This is a best-effort operation, it won\'t be effective if the original transaction has already been processed by the blockchain.
     * @summary Cancel a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {CancelTransactionForDeveloperRequest} cancelTransactionForDeveloperRequest Cancel transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionCancel: (id: string, cancelTransactionForDeveloperRequest: CancelTransactionForDeveloperRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a transaction which executes a smart contract. ABI parameters must be passed in the request. Related transactions may be submitted as a batch transaction in a single call.
     * @summary Create a contract execution transaction
     * @param {CreateContractExecutionTransactionForDeveloperRequest} createContractExecutionTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionContractExecution: (createContractExecutionTransactionForDeveloperRequest: CreateContractExecutionTransactionForDeveloperRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Initiates an on-chain digital asset transfer from a specified developer-controlled wallet.
     * @summary Create a transfer transaction
     * @param {CreateTransferTransactionForDeveloperRequest} createTransferTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionTransfer: (createTransferTransactionForDeveloperRequest: CreateTransferTransactionForDeveloperRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Creates a transaction which upgrades a wallet.
     * @summary Create a wallet upgrade transaction
     * @param {CreateWalletUpgradeTransactionForDeveloperRequest} createWalletUpgradeTransactionForDeveloperRequest Creates a transaction for a developer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionWalletUpgrade: (createWalletUpgradeTransactionForDeveloperRequest: CreateWalletUpgradeTransactionForDeveloperRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee: (estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee: (estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress: (validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction: (id: string, txType?: TransactionType, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {CustodyType} [custodyType] Filter by the custody type.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions: (blockchain?: Blockchain, custodyType?: CustodyType, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TransactionsApi - functional programming interface
 * @export
 */
declare const TransactionsApiFp: (configuration?: Configuration) => {
    /**
     * Accelerates a specified transaction from a developer-controlled wallet. Additional gas fees may be incurred.
     * @summary Accelerate a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {AccelerateTransactionForDeveloperRequest} accelerateTransactionForDeveloperRequest Accelerate transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionAccelerate(id: string, accelerateTransactionForDeveloperRequest: AccelerateTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccelerateTransactionForDeveloper>>;
    /**
     * Cancels a specified transaction from a developer-controlled wallet. Gas fees may still be incurred.  This is a best-effort operation, it won\'t be effective if the original transaction has already been processed by the blockchain.
     * @summary Cancel a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {CancelTransactionForDeveloperRequest} cancelTransactionForDeveloperRequest Cancel transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionCancel(id: string, cancelTransactionForDeveloperRequest: CancelTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CancelTransactionForDeveloper>>;
    /**
     * Creates a transaction which executes a smart contract. ABI parameters must be passed in the request. Related transactions may be submitted as a batch transaction in a single call.
     * @summary Create a contract execution transaction
     * @param {CreateContractExecutionTransactionForDeveloperRequest} createContractExecutionTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionContractExecution(createContractExecutionTransactionForDeveloperRequest: CreateContractExecutionTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateContractExecutionTransactionForDeveloper>>;
    /**
     * Initiates an on-chain digital asset transfer from a specified developer-controlled wallet.
     * @summary Create a transfer transaction
     * @param {CreateTransferTransactionForDeveloperRequest} createTransferTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionTransfer(createTransferTransactionForDeveloperRequest: CreateTransferTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateTransferTransactionForDeveloperResponse>>;
    /**
     * Creates a transaction which upgrades a wallet.
     * @summary Create a wallet upgrade transaction
     * @param {CreateWalletUpgradeTransactionForDeveloperRequest} createWalletUpgradeTransactionForDeveloperRequest Creates a transaction for a developer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionWalletUpgrade(createWalletUpgradeTransactionForDeveloperRequest: CreateWalletUpgradeTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateWalletUpgradeTransactionForDeveloper>>;
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateTransactionFee>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EstimateTransactionFee>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ValidateAddress>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, txType?: TransactionType, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TransactionResponse>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {CustodyType} [custodyType] Filter by the custody type.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(blockchain?: Blockchain, custodyType?: CustodyType, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Transactions>>;
};
/**
 * TransactionsApi - factory interface
 * @export
 */
declare const TransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Accelerates a specified transaction from a developer-controlled wallet. Additional gas fees may be incurred.
     * @summary Accelerate a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {AccelerateTransactionForDeveloperRequest} accelerateTransactionForDeveloperRequest Accelerate transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionAccelerate(id: string, accelerateTransactionForDeveloperRequest: AccelerateTransactionForDeveloperRequest, options?: any): AxiosPromise<AccelerateTransactionForDeveloper>;
    /**
     * Cancels a specified transaction from a developer-controlled wallet. Gas fees may still be incurred.  This is a best-effort operation, it won\'t be effective if the original transaction has already been processed by the blockchain.
     * @summary Cancel a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {CancelTransactionForDeveloperRequest} cancelTransactionForDeveloperRequest Cancel transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionCancel(id: string, cancelTransactionForDeveloperRequest: CancelTransactionForDeveloperRequest, options?: any): AxiosPromise<CancelTransactionForDeveloper>;
    /**
     * Creates a transaction which executes a smart contract. ABI parameters must be passed in the request. Related transactions may be submitted as a batch transaction in a single call.
     * @summary Create a contract execution transaction
     * @param {CreateContractExecutionTransactionForDeveloperRequest} createContractExecutionTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionContractExecution(createContractExecutionTransactionForDeveloperRequest: CreateContractExecutionTransactionForDeveloperRequest, options?: any): AxiosPromise<CreateContractExecutionTransactionForDeveloper>;
    /**
     * Initiates an on-chain digital asset transfer from a specified developer-controlled wallet.
     * @summary Create a transfer transaction
     * @param {CreateTransferTransactionForDeveloperRequest} createTransferTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionTransfer(createTransferTransactionForDeveloperRequest: CreateTransferTransactionForDeveloperRequest, options?: any): AxiosPromise<CreateTransferTransactionForDeveloperResponse>;
    /**
     * Creates a transaction which upgrades a wallet.
     * @summary Create a wallet upgrade transaction
     * @param {CreateWalletUpgradeTransactionForDeveloperRequest} createWalletUpgradeTransactionForDeveloperRequest Creates a transaction for a developer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createDeveloperTransactionWalletUpgrade(createWalletUpgradeTransactionForDeveloperRequest: CreateWalletUpgradeTransactionForDeveloperRequest, options?: any): AxiosPromise<CreateWalletUpgradeTransactionForDeveloper>;
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: any): AxiosPromise<EstimateTransactionFee>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: any): AxiosPromise<EstimateTransactionFee>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: any): AxiosPromise<ValidateAddress>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransaction(id: string, txType?: TransactionType, options?: any): AxiosPromise<TransactionResponse>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {CustodyType} [custodyType] Filter by the custody type.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listTransactions(blockchain?: Blockchain, custodyType?: CustodyType, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Transactions>;
};
/**
 * TransactionsApi - object-oriented interface
 * @export
 * @class TransactionsApi
 * @extends {BaseAPI}
 */
declare class TransactionsApi extends BaseAPI {
    /**
     * Accelerates a specified transaction from a developer-controlled wallet. Additional gas fees may be incurred.
     * @summary Accelerate a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {AccelerateTransactionForDeveloperRequest} accelerateTransactionForDeveloperRequest Accelerate transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createDeveloperTransactionAccelerate(id: string, accelerateTransactionForDeveloperRequest: AccelerateTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<AccelerateTransactionForDeveloper, any>>;
    /**
     * Cancels a specified transaction from a developer-controlled wallet. Gas fees may still be incurred.  This is a best-effort operation, it won\'t be effective if the original transaction has already been processed by the blockchain.
     * @summary Cancel a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {CancelTransactionForDeveloperRequest} cancelTransactionForDeveloperRequest Cancel transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createDeveloperTransactionCancel(id: string, cancelTransactionForDeveloperRequest: CancelTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CancelTransactionForDeveloper, any>>;
    /**
     * Creates a transaction which executes a smart contract. ABI parameters must be passed in the request. Related transactions may be submitted as a batch transaction in a single call.
     * @summary Create a contract execution transaction
     * @param {CreateContractExecutionTransactionForDeveloperRequest} createContractExecutionTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createDeveloperTransactionContractExecution(createContractExecutionTransactionForDeveloperRequest: CreateContractExecutionTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateContractExecutionTransactionForDeveloper, any>>;
    /**
     * Initiates an on-chain digital asset transfer from a specified developer-controlled wallet.
     * @summary Create a transfer transaction
     * @param {CreateTransferTransactionForDeveloperRequest} createTransferTransactionForDeveloperRequest Create transaction for developer request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createDeveloperTransactionTransfer(createTransferTransactionForDeveloperRequest: CreateTransferTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateTransferTransactionForDeveloperResponse, any>>;
    /**
     * Creates a transaction which upgrades a wallet.
     * @summary Create a wallet upgrade transaction
     * @param {CreateWalletUpgradeTransactionForDeveloperRequest} createWalletUpgradeTransactionForDeveloperRequest Creates a transaction for a developer request.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createDeveloperTransactionWalletUpgrade(createWalletUpgradeTransactionForDeveloperRequest: CreateWalletUpgradeTransactionForDeveloperRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<CreateWalletUpgradeTransactionForDeveloper, any>>;
    /**
     * Estimates gas fees that will be incurred for a contract execution transaction, given its ABI parameters and blockchain.
     * @summary Estimate fee for a contract execution transaction
     * @param {EstimateContractExecutionTransactionFeeRequest} estimateContractExecutionTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransactionEstimateFee(estimateContractExecutionTransactionFeeRequest: EstimateContractExecutionTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EstimateTransactionFee, any>>;
    /**
     * Estimates gas fees that will be incurred for a transfer transaction; given its amount, blockchain, and token.
     * @summary Estimate fee for a transfer transaction
     * @param {EstimateTransferTransactionFeeRequest} estimateTransferTransactionFeeRequest Estimate transaction fee request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createTransferEstimateFee(estimateTransferTransactionFeeRequest: EstimateTransferTransactionFeeRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<EstimateTransactionFee, any>>;
    /**
     * Confirms that a specified address is valid for a given token on a certain blockchain.
     * @summary Validate an address
     * @param {ValidateAddressRequest} validateAddressRequest Validate address request
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    createValidateAddress(validateAddressRequest: ValidateAddressRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<ValidateAddress, any>>;
    /**
     * Retrieves info for a single transaction using it\'s unique identifier.
     * @summary Get a transaction
     * @param {string} id The universally unique identifier of the resource.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    getTransaction(id: string, txType?: TransactionType, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<TransactionResponse, any>>;
    /**
     * Lists all transactions. Includes details such as status, source/destination, and transaction hash.
     * @summary List transactions
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {CustodyType} [custodyType] Filter by the custody type.
     * @param {string} [destinationAddress] Filter by the destination address.
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {ListTransactionsOperationEnum} [operation] Filter by the operation of the transaction.
     * @param {TransactionState} [state] Filter by the state of the transaction.
     * @param {string} [txHash] Filter on the transaction hash of the transaction.
     * @param {TransactionType} [txType] Filter by on the transaction type.
     * @param {string} [walletIds] Filter by the wallet IDs, this parameter is a comma separated list of ids.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TransactionsApi
     */
    listTransactions(blockchain?: Blockchain, custodyType?: CustodyType, destinationAddress?: string, includeAll?: boolean, operation?: ListTransactionsOperationEnum, state?: TransactionState, txHash?: string, txType?: TransactionType, walletIds?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Transactions, any>>;
}
/**
 * @export
 */
declare const ListTransactionsOperationEnum: {
    readonly Transfer: "TRANSFER";
    readonly ContractExecution: "CONTRACT_EXECUTION";
    readonly ContractDeployment: "CONTRACT_DEPLOYMENT";
};
type ListTransactionsOperationEnum = typeof ListTransactionsOperationEnum[keyof typeof ListTransactionsOperationEnum];

/**
 * WalletSetsApi - axios parameter creator
 * @export
 */
declare const WalletSetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Create a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateWalletSetRequest} createWalletSetRequest Schema for the request payload to create a new wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWalletSet: (createWalletSetRequest: CreateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an existing wallet set.
     * @summary Get a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSet: (id: string, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an array of existing wallet sets.
     * @summary Get all wallet sets
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSets: (xRequestId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Update the name of the wallet set
     * @summary Update a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletSetRequest} updateWalletSetRequest Schema for the request payload to update an existing wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWalletSet: (id: string, updateWalletSetRequest: UpdateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WalletSetsApi - functional programming interface
 * @export
 */
declare const WalletSetsApiFp: (configuration?: Configuration) => {
    /**
     * Create a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateWalletSetRequest} createWalletSetRequest Schema for the request payload to create a new wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWalletSet(createWalletSetRequest: CreateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletSetResponse>>;
    /**
     * Retrieve an existing wallet set.
     * @summary Get a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSet(id: string, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletSetResponse>>;
    /**
     * Retrieve an array of existing wallet sets.
     * @summary Get all wallet sets
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSets(xRequestId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletSets>>;
    /**
     * Update the name of the wallet set
     * @summary Update a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletSetRequest} updateWalletSetRequest Schema for the request payload to update an existing wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWalletSet(id: string, updateWalletSetRequest: UpdateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletSetResponse>>;
};
/**
 * WalletSetsApi - factory interface
 * @export
 */
declare const WalletSetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Create a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateWalletSetRequest} createWalletSetRequest Schema for the request payload to create a new wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWalletSet(createWalletSetRequest: CreateWalletSetRequest, xRequestId?: string, options?: any): AxiosPromise<WalletSetResponse>;
    /**
     * Retrieve an existing wallet set.
     * @summary Get a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSet(id: string, xRequestId?: string, options?: any): AxiosPromise<WalletSetResponse>;
    /**
     * Retrieve an array of existing wallet sets.
     * @summary Get all wallet sets
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletSets(xRequestId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<WalletSets>;
    /**
     * Update the name of the wallet set
     * @summary Update a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletSetRequest} updateWalletSetRequest Schema for the request payload to update an existing wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWalletSet(id: string, updateWalletSetRequest: UpdateWalletSetRequest, xRequestId?: string, options?: any): AxiosPromise<WalletSetResponse>;
};
/**
 * WalletSetsApi - object-oriented interface
 * @export
 * @class WalletSetsApi
 * @extends {BaseAPI}
 */
declare class WalletSetsApi extends BaseAPI {
    /**
     * Create a developer controlled wallet set.
     * @summary Create a new wallet set
     * @param {CreateWalletSetRequest} createWalletSetRequest Schema for the request payload to create a new wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletSetsApi
     */
    createWalletSet(createWalletSetRequest: CreateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletSetResponse, any>>;
    /**
     * Retrieve an existing wallet set.
     * @summary Get a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletSetsApi
     */
    getWalletSet(id: string, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletSetResponse, any>>;
    /**
     * Retrieve an array of existing wallet sets.
     * @summary Get all wallet sets
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletSetsApi
     */
    getWalletSets(xRequestId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletSets, any>>;
    /**
     * Update the name of the wallet set
     * @summary Update a wallet set
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletSetRequest} updateWalletSetRequest Schema for the request payload to update an existing wallet set.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletSetsApi
     */
    updateWalletSet(id: string, updateWalletSetRequest: UpdateWalletSetRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletSetResponse, any>>;
}

/**
 * WalletsApi - axios parameter creator
 * @export
 */
declare const WalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateWalletRequest} createWalletRequest Schema for the request payload to create a new wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWallet: (createWalletRequest: CreateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Derives an EOA wallet using the address of the specified wallet and blockchain. If the target wallet already exists, its metadata will be updated with the provided metadata. This operation is only supported for EVM-based blockchains.
     * @summary Derive a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {EvmBlockchain} blockchain The unique identifier of the blockchains.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {DeriveWalletRequest} [deriveWalletRequest] Defines the request payload schema for deriving a new wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deriveWallet: (id: string, blockchain: EvmBlockchain, xRequestId?: string, deriveWalletRequest?: DeriveWalletRequest, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieve an existing wallet
     * @summary Retrieve a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: (id: string, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of all wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallets: (address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Retrieves a list of wallets that match the specified parameters, including native token balances and, if specified, USDC/EURC balances. Balances update automatically with transfers or using the [Get token balance for a wallet](https://developers.circle.com/api-reference/w3s/developer-controlled-wallets/list-wallet-balance) endpoint for accuracy.
     * @summary List wallets with balances
     * @param {Blockchain} blockchain Filter by blockchain.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [amountGte] Filters wallets with a balance greater than or equal to the specified amount. If &#x60;tokenAddress&#x60; is provided, the filter applies to the specified token; otherwise, it applies to the native token.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletsWithBalances: (blockchain: Blockchain, xRequestId?: string, address?: string, scaCore?: ScaCore, walletSetId?: string, refId?: string, amountGte?: string, tokenAddress?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance: (id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts: (id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Updates info metadata of a wallet.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet: (id: string, updateWalletRequest: UpdateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * WalletsApi - functional programming interface
 * @export
 */
declare const WalletsApiFp: (configuration?: Configuration) => {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateWalletRequest} createWalletRequest Schema for the request payload to create a new wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWallet(createWalletRequest: CreateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wallets>>;
    /**
     * Derives an EOA wallet using the address of the specified wallet and blockchain. If the target wallet already exists, its metadata will be updated with the provided metadata. This operation is only supported for EVM-based blockchains.
     * @summary Derive a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {EvmBlockchain} blockchain The unique identifier of the blockchains.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {DeriveWalletRequest} [deriveWalletRequest] Defines the request payload schema for deriving a new wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deriveWallet(id: string, blockchain: EvmBlockchain, xRequestId?: string, deriveWalletRequest?: DeriveWalletRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponse>>;
    /**
     * Retrieve an existing wallet
     * @summary Retrieve a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponse>>;
    /**
     * Retrieves a list of all wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallets(address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wallets>>;
    /**
     * Retrieves a list of wallets that match the specified parameters, including native token balances and, if specified, USDC/EURC balances. Balances update automatically with transfers or using the [Get token balance for a wallet](https://developers.circle.com/api-reference/w3s/developer-controlled-wallets/list-wallet-balance) endpoint for accuracy.
     * @summary List wallets with balances
     * @param {Blockchain} blockchain Filter by blockchain.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [amountGte] Filters wallets with a balance greater than or equal to the specified amount. If &#x60;tokenAddress&#x60; is provided, the filter applies to the specified token; otherwise, it applies to the native token.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletsWithBalances(blockchain: Blockchain, xRequestId?: string, address?: string, scaCore?: ScaCore, walletSetId?: string, refId?: string, amountGte?: string, tokenAddress?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletsWithBalances>>;
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Balances>>;
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Nfts>>;
    /**
     * Updates info metadata of a wallet.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, updateWalletRequest: UpdateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WalletResponse>>;
};
/**
 * WalletsApi - factory interface
 * @export
 */
declare const WalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateWalletRequest} createWalletRequest Schema for the request payload to create a new wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createWallet(createWalletRequest: CreateWalletRequest, xRequestId?: string, options?: any): AxiosPromise<Wallets>;
    /**
     * Derives an EOA wallet using the address of the specified wallet and blockchain. If the target wallet already exists, its metadata will be updated with the provided metadata. This operation is only supported for EVM-based blockchains.
     * @summary Derive a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {EvmBlockchain} blockchain The unique identifier of the blockchains.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {DeriveWalletRequest} [deriveWalletRequest] Defines the request payload schema for deriving a new wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deriveWallet(id: string, blockchain: EvmBlockchain, xRequestId?: string, deriveWalletRequest?: DeriveWalletRequest, options?: any): AxiosPromise<WalletResponse>;
    /**
     * Retrieve an existing wallet
     * @summary Retrieve a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(id: string, xRequestId?: string, options?: any): AxiosPromise<WalletResponse>;
    /**
     * Retrieves a list of all wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallets(address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Wallets>;
    /**
     * Retrieves a list of wallets that match the specified parameters, including native token balances and, if specified, USDC/EURC balances. Balances update automatically with transfers or using the [Get token balance for a wallet](https://developers.circle.com/api-reference/w3s/developer-controlled-wallets/list-wallet-balance) endpoint for accuracy.
     * @summary List wallets with balances
     * @param {Blockchain} blockchain Filter by blockchain.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [amountGte] Filters wallets with a balance greater than or equal to the specified amount. If &#x60;tokenAddress&#x60; is provided, the filter applies to the specified token; otherwise, it applies to the native token.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWalletsWithBalances(blockchain: Blockchain, xRequestId?: string, address?: string, scaCore?: ScaCore, walletSetId?: string, refId?: string, amountGte?: string, tokenAddress?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<WalletsWithBalances>;
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletBalance(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Balances>;
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWalletNfts(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: any): AxiosPromise<Nfts>;
    /**
     * Updates info metadata of a wallet.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateWallet(id: string, updateWalletRequest: UpdateWalletRequest, xRequestId?: string, options?: any): AxiosPromise<WalletResponse>;
};
/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
declare class WalletsApi extends BaseAPI {
    /**
     * Generates a new developer-controlled wallet or batch of wallets within a wallet set, specifying blockchain and wallet name.
     * @summary Create wallets
     * @param {CreateWalletRequest} createWalletRequest Schema for the request payload to create a new wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    createWallet(createWalletRequest: CreateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Wallets, any>>;
    /**
     * Derives an EOA wallet using the address of the specified wallet and blockchain. If the target wallet already exists, its metadata will be updated with the provided metadata. This operation is only supported for EVM-based blockchains.
     * @summary Derive a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {EvmBlockchain} blockchain The unique identifier of the blockchains.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {DeriveWalletRequest} [deriveWalletRequest] Defines the request payload schema for deriving a new wallet.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    deriveWallet(id: string, blockchain: EvmBlockchain, xRequestId?: string, deriveWalletRequest?: DeriveWalletRequest, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletResponse, any>>;
    /**
     * Retrieve an existing wallet
     * @summary Retrieve a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWallet(id: string, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletResponse, any>>;
    /**
     * Retrieves a list of all wallets that fit the specified parameters.
     * @summary List wallets
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {Blockchain} [blockchain] Filter by blockchain.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWallets(address?: string, blockchain?: Blockchain, scaCore?: ScaCore, walletSetId?: string, refId?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Wallets, any>>;
    /**
     * Retrieves a list of wallets that match the specified parameters, including native token balances and, if specified, USDC/EURC balances. Balances update automatically with transfers or using the [Get token balance for a wallet](https://developers.circle.com/api-reference/w3s/developer-controlled-wallets/list-wallet-balance) endpoint for accuracy.
     * @summary List wallets with balances
     * @param {Blockchain} blockchain Filter by blockchain.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {string} [address] Filter by the blockchain address of the wallet.
     * @param {ScaCore} [scaCore] Filters results by the SCA version.
     * @param {string} [walletSetId] Filter by the wallet set.
     * @param {string} [refId] Filter by the reference identifier.
     * @param {string} [amountGte] Filters wallets with a balance greater than or equal to the specified amount. If &#x60;tokenAddress&#x60; is provided, the filter applies to the specified token; otherwise, it applies to the native token.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {string} [from] Queries items created since the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [to] Queries items created before the specified date-time (inclusive) in ISO 8601 format.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWalletsWithBalances(blockchain: Blockchain, xRequestId?: string, address?: string, scaCore?: ScaCore, walletSetId?: string, refId?: string, amountGte?: string, tokenAddress?: string, from?: string, to?: string, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletsWithBalances, any>>;
    /**
     * Fetches the digital asset balance for a single developer-controlled wallet using its unique identifier.
     * @summary Get token balance for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletBalance(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Balances, any>>;
    /**
     * Fetches the info for all NFTs stored in a single developer-controlled wallet, using the wallets unique identifier.
     * @summary Get NFTs for a wallet
     * @param {string} id Wallet ID
     * @param {boolean} [includeAll] Return all recourses with monitored and non-monitored tokens.
     * @param {string} [name] Filter by token name.
     * @param {string} [tokenAddress] Filter by token address.
     * @param {TokenStandard} [standard] Filter by the token standard. ERC20/ERC721/ERC1155 are the standards for EVM chains, Fungible/FungibleAsset/NonFungible/NonFungibleEdition/ProgrammableNonFungible/ProgrammableNonFungibleEdition are the standards for the Solana chain.
     * @param {string} [pageBefore] A collection ID value used for pagination.  It marks the exclusive end of a page. When provided, the collection resource will return the next n items before the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.   SHOULD NOT be used in conjunction with pageAfter.
     * @param {string} [pageAfter] A collection ID value used for pagination.  It marks the exclusive begin of a page. When provided, the collection resource will return the next n items after the id, with n being specified by pageSize.  The items will be returned in the natural order of the collection.  The resource will return the first page if neither pageAfter nor pageBefore are specified.  SHOULD NOT be used in conjunction with pageBefore.
     * @param {number} [pageSize] Limits the number of items to be returned.  Some collections have a strict upper bound that will disregard this value. In case the specified value is higher than the allowed limit, the collection limit will be used.  If avoided, the collection will determine the page size itself.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWalletNfts(id: string, includeAll?: boolean, name?: string, tokenAddress?: string, standard?: TokenStandard, pageBefore?: string, pageAfter?: string, pageSize?: number, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<Nfts, any>>;
    /**
     * Updates info metadata of a wallet.
     * @summary Update a wallet
     * @param {string} id The universally unique identifier of the resource.
     * @param {UpdateWalletRequest} updateWalletRequest Schema for the request payload to update an existing wallet.
     * @param {string} [xRequestId] Developer-provided parameter used to identify this request. Useful when communicating with Circle Support.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    updateWallet(id: string, updateWalletRequest: UpdateWalletRequest, xRequestId?: string, options?: AxiosRequestConfig): Promise<axios.AxiosResponse<WalletResponse, any>>;
}

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

interface ClientConfig {
    /**
     * ApiKey that will be used to authenticate the request
     */
    apiKey: string;
    /**
     * Version of the client. Will be added to the user agent.
     */
    version: string;
    /**
     * Customized user agent. Will be added to the user agent.
     */
    userAgent?: string;
}
declare class DeveloperControlledWalletsClient {
    Signing: ReturnType<typeof SigningApiFactory>;
    TokenLookup: ReturnType<typeof TokenLookupApiFactory>;
    Transactions: ReturnType<typeof TransactionsApiFactory>;
    WalletSets: ReturnType<typeof WalletSetsApiFactory>;
    Wallets: ReturnType<typeof WalletsApiFactory>;
    constructor(baseUrl: string, config: ClientConfig, headers?: Record<string, string>);
}

export { type AbiParametersInner, type AccelerateTransactionForDeveloper, type AccelerateTransactionForDeveloperData, type AccelerateTransactionForDeveloperRequest, AccountType, type BadRequestResponse, type Balance, type Balances, type BalancesData, type BaseScreeningDecision, Blockchain, type CancelTransactionForDeveloper, type CancelTransactionForDeveloperRequest, ContractExecutionBlockchain, type CreateContractExecutionTransactionForDeveloper, type CreateContractExecutionTransactionForDeveloperRequest, type CreateTransferTransactionForDeveloperRequest, type CreateTransferTransactionForDeveloperResponse, type CreateTransferTransactionForDeveloperResponseData, type CreateWalletRequest, type CreateWalletSetRequest, type CreateWalletUpgradeTransactionForDeveloper, type CreateWalletUpgradeTransactionForDeveloperRequest, CustodyType, type DeriveWalletRequest, DeveloperControlledWalletsClient, type DeveloperWalletSet, type EOAWallet, type EOAWalletWithBalances, type EndUserWalletSet, type EstimateContractExecutionTransactionFeeRequest, type EstimateTransactionFee, type EstimateTransactionFeeData, type EstimateTransferTransactionFeeRequest, EvmBlockchain, FeeLevel, ListTransactionsOperationEnum, type ModelError, NewScaCore, type Nft, type Nfts, type NftsData, type NotAuthorizedResponse, type NotFoundResponse, Operation, RiskAction, RiskCategory, RiskScore, type RiskSignal, RiskSignalSourceEnum, RiskType, type SCAWallet, type SCAWalletWithBalances, ScaCore, type SignDelegateActionRequest, type SignDelegateActionResponse, type SignDelegateActionResponseData, type SignMessageRequest, type SignTransactionRequest, type SignTransactionResponse, type SignTransactionResponseData, type SignTypedDataRequest, type SignatureResponse, type SignatureResponseData, SigningApi, SigningApiAxiosParamCreator, SigningApiFactory, SigningApiFp, type Token, TokenBlockchain, TokenLookupApi, TokenLookupApiAxiosParamCreator, TokenLookupApiFactory, TokenLookupApiFp, type TokenResponse, type TokenResponseData, TokenStandard, type Transaction, type TransactionFee, type TransactionResponse, type TransactionResponseData, type TransactionScreeningDecision, TransactionState, TransactionType, type Transactions, TransactionsApi, TransactionsApiAxiosParamCreator, TransactionsApiFactory, TransactionsApiFp, type TransactionsData, type UpdateWalletRequest, type UpdateWalletSetRequest, type ValidateAddress, type ValidateAddressData, type ValidateAddressRequest, type Wallet, type WalletMetadata, type WalletResponse, type WalletResponseData, type WalletSet, type WalletSetResponse, type WalletSetResponseData, type WalletSets, WalletSetsApi, WalletSetsApiAxiosParamCreator, WalletSetsApiFactory, WalletSetsApiFp, type WalletSetsData, type WalletSetsDataWalletSetsInner, WalletState, type Wallets, WalletsApi, WalletsApiAxiosParamCreator, WalletsApiFactory, WalletsApiFp, type WalletsData, type WalletsDataWalletsInner, type WalletsWithBalances, type WalletsWithBalancesData, type WalletsWithBalancesDataWalletsInner };
